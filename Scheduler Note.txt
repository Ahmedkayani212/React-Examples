npm install react-datepicker
npm install date-fns

App.js

import React from 'react';
import Scheduler from './Scheduler';

function App() {
  return (
    <div className="App">
      <Scheduler />
    </div>
  );
}

export default App;


Scheduler.js
import React, { useState } from 'react';
import DatePicker from 'react-datepicker';
import { format } from 'date-fns';
import 'react-datepicker/dist/react-datepicker.css';
import './Scheduler.css'; // Import the CSS file for styling

const Scheduler = () => {
  const [message, setMessage] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [contacts, setContacts] = useState([]);
  const [isDateModalOpen, setIsDateModalOpen] = useState(false); // Modal state for date
  const [isContactModalOpen, setIsContactModalOpen] = useState(false); // Modal state for contacts
  const [newContact, setNewContact] = useState({ firstName: '', lastName: '', mobileNumber: '' });

  const handleMessageChange = (e) => {
    setMessage(e.target.value);
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
  };

  const handleAddContacts = () => {
    setIsContactModalOpen(true); // Open the contact modal
  };

  const handleSaveContact = () => {
    if (newContact.firstName && newContact.lastName && newContact.mobileNumber) {
      // Add new contact to the list
      setContacts([...contacts, newContact]);
      setNewContact({ firstName: '', lastName: '', mobileNumber: '' }); // Reset input fields
      setIsContactModalOpen(false); // Close the contact modal
    } else {
      alert('Please fill in all fields.');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewContact(prevState => ({ ...prevState, [name]: value }));
  };

  const handleSave = () => {
    alert('Message Saved!');
  };

  const openDateModal = () => {
    setIsDateModalOpen(true); // Open the date modal
  };

  const closeDateModal = () => {
    setIsDateModalOpen(false); // Close the date modal
  };

  const saveDate = () => {
    closeDateModal();
  };

  const handleDeleteContact = (index) => {
    setContacts(contacts.filter((_, i) => i !== index));
  };

  // Format the date to 'Thursday, 13 April 2023'
  const formattedDate = format(selectedDate, 'EEEE, dd MMMM yyyy');

  return (
    <div className="message-scheduler-container">
      <div className="message-header">
        <h3>Message</h3>
        <button className="save-btn" onClick={handleSave}>Save</button>
      </div>

      <textarea
        className="message-input"
        placeholder="Your Message..."
        value={message}
        onChange={handleMessageChange}
      />

      <div className="date-time-section">
        <div className="icon-container">
          <i className="fas fa-calendar-alt"></i> {/* Calendar Icon */}
        </div>
        <div className="date-info">
          <span>Pick Date & Time</span>
          <p>{formattedDate}</p>
        </div>
        <button className="edit-btn" onClick={openDateModal}>
          Edit
        </button>
      </div>

      <div className="contacts-section">
        <div className="icon-container">
          <i className="fas fa-user-plus"></i> {/* User Add Icon */}
        </div>
        <div className="contact-info">
          <span>Add Contacts</span>
        </div>
        <button className="edit-btn" onClick={handleAddContacts}>
          Add
        </button>
      </div>

      {/* Contact List Section */}
      <div className="contact-list-section">
        <h4>Contact List</h4>
        <ul className="contact-list">
          {contacts.map((contact, index) => (
            <li key={index}>
              {contact.firstName} {contact.lastName} - {contact.mobileNumber}
              <button className="delete-btn" onClick={() => handleDeleteContact(index)}>Delete</button>
            </li>
          ))}
        </ul>
      </div>

      {/* Date & Time Modal */}
      {isDateModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h3>Edit Date & Time</h3>
            <DatePicker
              selected={selectedDate}
              onChange={handleDateChange}
              dateFormat="dd/MM/yyyy" // Optional: Define your preferred date format
              className="date-picker"
              popperClassName="date-picker-popover"
            />
            <div className="modal-buttons">
              <button className="cancel-btn" onClick={closeDateModal}>Cancel</button>
              <button className="save-btn" onClick={saveDate}>Save</button>
            </div>
          </div>
        </div>
      )}

      {/* Contact Modal */}
      {isContactModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h3>Add New Contact</h3>
            <input
              type="text"
              name="firstName"
              placeholder="First Name"
              value={newContact.firstName}
              onChange={handleInputChange}
              className="modal-input"
            />
            <input
              type="text"
              name="lastName"
              placeholder="Last Name"
              value={newContact.lastName}
              onChange={handleInputChange}
              className="modal-input"
            />
            <input
              type="text"
              name="mobileNumber"
              placeholder="Mobile Number"
              value={newContact.mobileNumber}
              onChange={handleInputChange}
              className="modal-input"
            />
            <div className="modal-buttons">
              <button className="cancel-btn" onClick={() => setIsContactModalOpen(false)}>Cancel</button>
              <button className="save-btn" onClick={handleSaveContact}>Save</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Scheduler;



Scheduler.css
.edit-btn {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .edit-btn:hover {
    background-color: #0056b3;
  }
  
  .message-scheduler-container {
    background-color: #1c1c1c;
    padding: 20px;
    border-radius: 10px;
    color: #fff;
    max-width: 400px;
    margin: 0 auto;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.5);
  }
  
  .message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }
  
  .message-header h3 {
    margin: 0;
    font-size: 20px;
    color: #fff;
  }
  
  .save-btn {
    background: none;
    border: none;
    color: #aaa;
    font-size: 16px;
    cursor: pointer;
  }
  
  .save-btn:hover {
    color: #fff;
  }
  
  .message-input {
    width: 92%;
    height: 80px;
    padding: 15px;
    background-color: #2b2b2b;
    border: none;
    border-radius: 8px;
    color: #fff;
    margin-bottom: 20px;
    resize: none;
  }
  
  .message-input::placeholder {
    color: #aaa;
  }
  
  .date-time-section,
  .contacts-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #2b2b2b;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
  }
  
  .icon-container {
    background-color: #404040;
    padding: 10px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .icon-container i {
    color: #fff;
    font-size: 20px;
  }
  
  .date-info,
  .contact-info {
    flex-grow: 1;
    margin-left: 10px;
  }
  
  .date-info span,
  .contact-info span {
    display: block;
    font-size: 16px;
    color: #fff;
  }
  
  .date-info p {
    margin: 0;
    font-size: 14px;
    color: #aaa;
  }
  
  .date-picker {
    padding: 10px;
    width: 100%;
    border-radius: 5px;
    background-color: #404040;
    color: #fff;
    border: none;
  }
  
  .date-picker-popover {
    z-index: 9999;
  }
  
  /* Modal Styling */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .modal-content {
    background-color: #2b2b2b;
    padding: 20px;
    border-radius: 8px;
    width: 300px;
    text-align: center;
  }
  
  .modal h3 {
    color: #fff;
    margin-bottom: 20px;
  }
  
  .modal-input {
    width: 90%;
    padding: 10px;
    border-radius: 5px;
    background-color: #404040;
    color: #fff;
    border: none;
    margin-bottom: 10px;
  }
  
  .modal-buttons {
    margin-top: 20px;
    display: flex;
    justify-content: space-between;
  }
  
  .cancel-btn,
  .save-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    color: #fff;
  }
  
  .cancel-btn {
    background-color: #ff6666;
  }
  
  .save-btn {
    background-color: #00ff66;
  }
  
  /* Contact List Section */
  .contact-list-section {
    background-color: #2b2b2b;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
  }
  
  .contact-list-section h4 {
    margin: 0;
    font-size: 18px;
    color: #fff;
  }
  
  .contact-list {
    list-style-type: none;
    padding: 0;
  }
  
  .contact-list li {
    padding: 10px;
    background-color: #404040;
    margin-bottom: 10px;
    border-radius: 5px;
    color: #fff;
    position: relative;
  }
  
  .delete-btn {
    background-color: #ff4d4d;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
  }
  
  .delete-btn:hover {
    background-color: #cc0000;
  }
  
  